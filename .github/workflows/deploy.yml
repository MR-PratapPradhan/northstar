name: Deploy

on:
  push:
    branches: [dev, stage, prod]
  pull_request:
    branches: [dev, stage, prod]
    paths:
      - 'apps/**'
      - 'infra/**'

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref_name }} # Automatically sets environment to dev/stage/prod
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::<ACCOUNT_ID>:role/<ROLE_NAME>
          aws-region: ap-south-1
     
      - name: Check AWS Budget Status
        run: |
          echo "Checking AWS Budget for environment: ${{ github.ref_name }}"
          BUDGET_NAME="${{ github.ref_name }}-budget"
          ACCOUNT_ID="<YOUR_AWS_ACCOUNT_ID>"

          status=$(aws budgets describe-budget-performance \
            --account-id $ACCOUNT_ID \
            --budget-name $BUDGET_NAME \
            | jq -r '.BudgetPerformance.Status')

          echo "Budget status: $status"
          if [[ "$status" == "ALARM" ]]; then
            echo "❌ Budget threshold exceeded for $BUDGET_NAME. Halting deployment."
            exit 1
          fi

      - name: Deploy with Terragrunt
        run: |
          terragrunt apply --terragrunt-working-dir infra/terragrunt/${{ github.ref_name }}

      - name: Capture metadata
        run: |
          echo "Git SHA: ${{ github.sha }}" > metadata.txt
          echo "SBOM hash: $(sha256sum sbom.json | awk '{print $1}')" >> metadata.txt
          cosign verify apps/retail-api:latest > cosign_bundle.txt
          echo "Cosign bundle: $(cat cosign_bundle.txt | sha256sum | awk '{print $1}')" >> metadata.txt

      - name: Push metadata to CloudWatch Logs
        run: |
          aws logs create-log-group --log-group-name /deployments/retail-api || true
          aws logs create-log-stream --log-group-name /deployments/retail-api --log-stream-name ${{ github.sha }} || true
          TIMESTAMP=$(date +%s%3N)
          aws logs put-log-events \
            --log-group-name /deployments/retail-api \
            --log-stream-name ${{ github.sha }} \
            --log-events timestamp=$TIMESTAMP,message="$(cat metadata.txt)"


